@inject EbookRetriever EbookRetriever
@inject ILogger<BookDetailComponent> Logger
@inject NavigationManager NavigationManager


@if (!string.IsNullOrWhiteSpace(BookOpenSearchId) && thisBook != null && thisBook.MatchedSnippets.Count > 0)
{

    <div class="position-sticky top-0 m-lg-3 m-sm-1 d-flex align-items-center" style="z-index:1">

        <div class="top-0 end-0 position-absolute" style="background-color:rgba(128,128,128,0.7)">
            <a class="link-primary" href="#" @onclick="CloseBook"><span class="text-white">  Close the book </span> <i class="fa fa-rectangle-xmark fa-2xl"> </i></a>
        </div>

    </div>
    <p>&nbsp;</p>
    <p>
        @thisBook.FileName contains @thisBook.MatchedSnippets.Count matching sections.
    </p>
    <div class="position-relative overflow-scroll">
        @for (int i = 0; i < thisBook.MatchedSnippets.Count; i++)
        {
            var currentSnippet = thisBook.MatchedSnippets.ElementAt(i);
            <div class="d-flex flex-column">
                <div>
                    <span>Match #@(i + 1) of @thisBook.MatchedSnippets.Count  found at character position @currentSnippet.Key (@(Convert.ToInt32(((float)currentSnippet.Key / (float)_bookLength) * 100))  %) in the book.</span>
                </div>
                <div class="snippet p-lg-1">@((MarkupString)currentSnippet.Value)</div>
            </div>
        }
    </div>
}

@code {

    [Parameter]
    public string BookOpenSearchId { get; set; } = "";

    [Parameter]
    public string? SearchTerm { get; set; }

    private IMatchedEbook? thisBook = null;

    private long _searchTime = 0;
    private long _snippetTime = 0;
    private int _bookLength = 0;



    private void CloseBook()
    {
        BookOpenSearchId = "";
        thisBook = null;
        NavigationManager.NavigateTo($"#topoflist");
    }


    protected override async Task OnParametersSetAsync()
    {
        if (BookOpenSearchId != "" && !string.IsNullOrWhiteSpace(SearchTerm))
        {
            thisBook = null;
            var sw = Stopwatch.StartNew();
            IMatchedEbook oneBook = await EbookRetriever.Retrieve(BookOpenSearchId);
            sw.Stop();
            _searchTime = sw.ElapsedMilliseconds;
            sw.Restart();
            //oneBook.LoadMatches(SearchTerm);
            oneBook.LoadFuzzyMatches(SearchTerm);

            oneBook.MarkMatches(SearchTerm);
            sw.Stop();
            _snippetTime = sw.ElapsedMilliseconds;
            thisBook = oneBook;
            _bookLength = thisBook.BookText.Length;
        }
    }
}
